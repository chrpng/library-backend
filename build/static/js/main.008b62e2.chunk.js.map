{"version":3,"sources":["queries.js","components/UpdateAuthor.js","components/Authors.js","components/Books.js","components/NewBook.js","components/Recommendations.js","components/LoginForm.js","App.js","index.js"],"names":["BOOK_DETAILS","gql","ALL_AUTHORS","ALL_BOOKS","CREATE_BOOK","UPDATE_AUTHOR","ALL_GENRES","LOGIN","ME","BOOK_ADDED","AUTHOR_ADDED","UpdateAuthor","authors","useState","name","setName","born","setBorn","useMutation","onError","error","console","log","updateAuthor","onSubmit","e","preventDefault","variables","setBornTo","value","onChange","target","map","a","key","id","parseInt","type","Authors","show","useQuery","data","allAuthors","bookCount","Books","genreSelect","setGenreSelect","books","setBooks","genres","setGenres","genresResult","useLazyQuery","getBooks","result","handleGenreSelect","genre","genreToSelect","useEffect","loading","allBooks","allGenres","title","author","published","onClick","NewBook","props","setTitle","setAuthor","setPublished","setGenre","createBook","submit","event","concat","join","Recommendations","favoriteGenre","me","booksResult","Login","setToken","setPage","username","setUsername","password","setPassword","login","token","localStorage","setItem","App","page","client","useApolloClient","existingToken","getItem","useSubscription","onSubscriptionData","subscriptionData","addedBook","bookAdded","updateCacheWith","addedAuthor","authorAdded","addedObject","storeProp","query","set","object","dataInStore","readQuery","b","includes","writeQuery","clear","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","split","definition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.008b62e2.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\n\nconst BOOK_DETAILS = gql`\n\tfragment BookDetails on Book {\n\t\ttitle\n\t\tauthor {\n\t\t\tname\n\t\t}\n\t\tgenres\n\t\tpublished\n\t\tid\n\t}\n`\n\nexport const ALL_AUTHORS = gql`\n\tquery {\n\t\tallAuthors {\n\t\t\tname\n\t\t\tborn\n\t\t\tbookCount\n\t\t\tid\n\t\t}\n\t}\n`\n\n// export const ALL_BOOKS = gql`\n// \tquery {\n// \t\tallBooks {\n// \t\t\t...BookDetails\n// \t\t}\n// \t}\n// \t${BOOK_DETAILS}\n// `\n\nexport const ALL_BOOKS = gql`\n\tquery getBooksByGenre($genreToSelect: String) {\n\t\tallBooks(genre: $genreToSelect) {\n\t\t\ttitle\n\t\t\tauthor {\n\t\t\t\tname\n\t\t\t}\n\t\t\tgenres\n\t\t\tpublished\n\t\t\tid\n\t\t}\n\t}\n`\n\nexport const CREATE_BOOK = gql`\n\tmutation createBook($title: String!, $author: String!, $published: Int!, $genres: [String!]!) {\n\t\taddBook(title: $title, author: $author, published: $published, genres: $genres) {\n\t\t\ttitle\n\t\t\tauthor {\n\t\t\t\tname\n\t\t\t}\n\t\t\tpublished\n\t\t\tid\n\t\t}\n\t}\n`\n\nexport const UPDATE_AUTHOR = gql`\n\tmutation updateAuthor($name: String!, $setBornTo: Int!) {\n\t\teditAuthor(name: $name, setBornTo: $setBornTo) {\n\t\t\tname\n\t\t\tborn\n\t\t\tid\n\t\t}\n\t}\n`\n\nexport const ALL_GENRES = gql`\n\tquery {\n\t\tallGenres\n\t}\n`\n\nexport const LOGIN = gql`\n\tmutation login($username: String!, $password: String!) {\n\t\tlogin(username: $username, password: $password) {\n\t\t\tvalue\n\t\t}\n\t}\n`\n\nexport const ME = gql`\n\tquery {\n\t\tme {\n\t\t\tusername\n\t\t\tfavoriteGenre\n\t\t\tid\n\t\t}\n\t}\n`\n\nexport const BOOK_ADDED = gql`\n\tsubscription {\n\t\tbookAdded {\n\t\t\t...BookDetails\n\t\t}\n\t}\n\t${BOOK_DETAILS}\n`\n\nexport const AUTHOR_ADDED = gql`\n\tsubscription {\n\t\tauthorAdded {\n\t\t\tname\n\t\t\tborn\n\t\t\tbookCount\n\t\t\tid\n\t\t}\n\t}\n`","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\n\nimport { UPDATE_AUTHOR } from '../queries'\n\nconst UpdateAuthor = ({ authors }) => {\n\tconst [name, setName] = useState(authors[0]?.name || '')\n\tconst [born, setBorn] = useState('')\n\t\n\tconst [ updateAuthor ] = useMutation(UPDATE_AUTHOR, {\n\t\t// refetchQueries: [ { query: ALL_AUTHORS } ] // shouldn't need this line if details are saved to cache according to ID\n\t\tonError: (error) => {\n\t\t\tconsole.log(error)\n\t\t\t// console.log(error.graphQLErrors[0].message)\n\t\t}\n\t})\n\n\tconst update = (e) => {\n\t\te.preventDefault()\n\t\tconsole.log(name)\n\t\tupdateAuthor({ variables: { name, setBornTo: born } })\n\n\t\tsetBorn('')\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Set birth year</h2>\n\t\t\t<form onSubmit={update}>\n        <div>\n          <select value={name} onChange={({ target }) => setName(target.value)}>\n\t\t\t\t\t\t{authors?.map(a =>\n\t\t\t\t\t\t\t<option key={a.id} value={a.name}>{a.name}</option>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</select>\n        </div>\n        <div>\n          born\n          <input\n            value={born}\n            onChange={({ target }) => setBorn(parseInt(target.value))}\n          />\n        </div>\n        <button type='submit'>update author</button>\n      </form>\n\t\t</div>\n\t);\n}\n \nexport default UpdateAuthor;","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport UpdateAuthor from './UpdateAuthor'\n\nimport { ALL_AUTHORS } from '../queries'\n\nconst Authors = ({ show }) => {\n\tconst result = useQuery(ALL_AUTHORS)\n\tconst authors = result.data?.allAuthors\n\n\t// const [ authors, setAuthors ] = useState([])\n\n\t// useEffect(() => {\n\t// \tif (result.data?.allAuthors) setAuthors(result.data.allAuthors)\n\t// }, [result])\n\n  if (!show) {\n    return null\n\t}\n\n  return (\n    <div>\n      <h2>authors</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>\n              born\n            </th>\n            <th>\n              books\n            </th>\n          </tr>\n          {authors?.map(a =>\n            <tr key={a.name}>\n              <td>{a.name}</td>\n              <td>{a.born}</td>\n              <td>{a.bookCount}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n\t\t\t{ authors && <UpdateAuthor authors={authors}/> }\n    </div>\n  )\n}\n\nexport default Authors\n","import React, { useState, useEffect } from 'react'\nimport { useQuery, useLazyQuery } from '@apollo/client'\n\nimport { ALL_GENRES, ALL_BOOKS } from '../queries'\n\nconst Books = ({ show }) => {\n\tconst [ genreSelect, setGenreSelect ] = useState(null)\n\tconst [ books, setBooks ] = useState(null)\n\tconst [ genres, setGenres ] = useState(null)\n\n\t// const booksResult = useQuery(ALL_BOOKS)\n\tconst genresResult = useQuery(ALL_GENRES) //may not update automatically\n\t// const genres = genresResult.data?.allGenres\n\n\tconst [ getBooks, result ] = useLazyQuery(ALL_BOOKS)\n\n\tconst handleGenreSelect = (genre) => {\n\t\t// can this be handled by cache?\n\t\tgetBooks({ variables: { genreToSelect: genre } })\n\t\tsetGenreSelect(genre)\n\t}\n\n\tuseEffect(() => {\n\t\tif (!result.data && !result.loading) {\n\t\t\t// getBooks({ variables: { genreToSelect: null } })\n\t\t\tgetBooks()\n\t\t} else if (result.data) {\n\t\t\tsetBooks(result.data.allBooks)\n\t\t}\n\t}, [result.data]) //eslint-disable-line\n\n\tuseEffect(() => {\n\t\tif (genresResult.data) setGenres(genresResult.data.allGenres)\n\t}, [genresResult.data])\n\n  if (!show) {\n    return null\n  }\n\n  return (\n    <div>\n      <h2>books</h2>\n\n\t\t\t{ genreSelect && <div>{genreSelect} selected</div>}\n\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>\n              author\n            </th>\n            <th>\n              published\n            </th>\n          </tr>\n          {books && books.map(a =>\n            <tr key={a.title}>\n              <td>{a.title}</td>\n              <td>{a.author.name}</td>\n              <td>{a.published}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n\n\t\t\t<div>\n\t\t\t\t{\n\t\t\t\t\tgenres && genres.map(genre =>\n\t\t\t\t\t\t<button key={genre} onClick={() => handleGenreSelect(genre)}>{genre}</button>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t<button onClick={() => handleGenreSelect(null)}>all genres</button>\n\t\t\t</div>\n    </div>\n  )\n}\n\nexport default Books","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\n\nimport { ALL_AUTHORS, CREATE_BOOK } from '../queries'\n\nconst NewBook = (props) => {\n\tconst [title, setTitle] = useState('')\n  const [author, setAuthor] = useState('')\n  const [published, setPublished] = useState('')\n  const [genre, setGenre] = useState('')\n  const [genres, setGenres] = useState([])\n\t\n\tconst [ createBook ] = useMutation(CREATE_BOOK, {\n\t\tonError: (error) => {\n\t\t\t// console.log(error.graphQLErrors[0].message)\n\t\t\tconsole.log(error)\n\t\t},\n\t\t// refetchQueries: [ { query: ALL_AUTHORS } ],\n\t\t// update: (store, response) => {\n\t\t// \tconst booksInStore = store.readQuery({ query: ALL_BOOKS_BY_GENRE })\n\t\t// \tstore.writeQuery({\n\t\t// \t\tquery: ALL_BOOKS_BY_GENRE,\n\t\t// \t\tdata: {\n\t\t// \t\t\tallBooks: [ ...booksInStore.allBooks, response.data.addBook ]\n\t\t// \t\t}\n\t\t// \t})\n\t\t// }\n\t})\n\n  if (!props.show) {\n    return null\n  }\n\n  const submit = async (event) => {\n    event.preventDefault()\n\t\t\n    createBook({ variables: { title, author, published, genres } })\n\n    setTitle('')\n    setPublished('')\n    setAuthor('')\n    setGenres([])\n    setGenre('')\n  }\n\n  const addGenre = () => {\n    setGenres(genres.concat(genre))\n    setGenre('')\n  }\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        <div>\n          title\n          <input\n            value={title}\n            onChange={({ target }) => setTitle(target.value)}\n          />\n        </div>\n        <div>\n          author\n          <input\n            value={author}\n            onChange={({ target }) => setAuthor(target.value)}\n          />\n        </div>\n        <div>\n          published\n          <input\n            type='number'\n            value={published}\n            onChange={({ target }) => setPublished(parseInt(target.value))}\n          />\n        </div>\n        <div>\n          <input\n            value={genre}\n            onChange={({ target }) => setGenre(target.value)}\n          />\n          <button onClick={addGenre} type=\"button\">add genre</button>\n        </div>\n        <div>\n          genres: {genres.join(' ')}\n        </div>\n        <button type='submit'>create book</button>\n      </form>\n    </div>\n  )\n}\n\nexport default NewBook","import React, { useState, useEffect } from 'react'\nimport { useQuery, useLazyQuery } from '@apollo/client'\n\nimport { ALL_BOOKS, ME } from '../queries'\n\nconst Recommendations = ({ show }) => {\n\tconst [ books, setBooks ] = useState(null)\n\n\tconst meResult = useQuery(ME)\n\tconst favoriteGenre = meResult.data?.me?.favoriteGenre\n\tconst [ getBooks, booksResult ] = useLazyQuery(ALL_BOOKS, { variables: { genreToSelect: favoriteGenre } })\n\n\tuseEffect(() => {\n\t\tgetBooks()\n\t}, [])\n\n\tuseEffect(() => {\n\t\tif (booksResult.data) setBooks(booksResult.data.allBooks)\n\t}, [booksResult.data])\n\n  if (!show) {\n    return null\n  }\n\n  return (\n    <div>\n      <h2>recommendations</h2>\n\n\t\t\t{ favoriteGenre && <div>books in your favorite genre {favoriteGenre}</div>}\n\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>\n              author\n            </th>\n            <th>\n              published\n            </th>\n          </tr>\n          {books && books.map(a =>\n            <tr key={a.title}>\n              <td>{a.title}</td>\n              <td>{a.author.name}</td>\n              <td>{a.published}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Recommendations","import React, { useState, useEffect } from 'react'\nimport { useMutation } from '@apollo/client'\n\nimport { LOGIN } from '../queries'\n\nconst Login = ({ show, setToken, setPage }) => {\n\tconst [ username, setUsername ] = useState('')\n\tconst [ password, setPassword ] = useState('')\n\n\tconst [ login, result ] = useMutation(LOGIN)\n\n\tconst submit = (e) => {\n\t\te.preventDefault()\n\t\tlogin({ variables: { username, password } })\n\n\t\tsetUsername('')\n\t\tsetPassword('')\n\t}\n\n\tuseEffect(() => {\n\t\tif(result.data) {\n\t\t\tconsole.log(result)\n\t\t\tconst token = result.data.login.value\n\n\t\t\tsetToken(token)\n\t\t\tlocalStorage.setItem('library-user-token', token)\n\n\t\t\tsetPage('authors')\n\t\t}\n\t}, [result.data]) //eslint-disable-line\n\n\tif (!show) {\n    return null\n\t}\n\n\treturn (\n\t\t<div>\n      <form onSubmit={submit}>\n        <div>\n\t\t\t\t\tusername\n          <input\n\t\t\t\t\t\ttype=\"text\"\n            value={username}\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </div>\n        <div>\n\t\t\t\t\tpassword\n          <input\n\t\t\t\t\t\ttype=\"password\"\n            value={password}\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button type='submit'>login</button>\n      </form>\n    </div>\n\t)\n}\n \nexport default Login","\nimport React, { useState, useEffect } from 'react'\nimport { useApolloClient, useSubscription } from '@apollo/client'\nimport Authors from './components/Authors'\nimport Books from './components/Books'\nimport NewBook from './components/NewBook'\nimport Recommendations from './components/Recommendations'\nimport Login from './components/LoginForm'\n\nimport { ALL_BOOKS, ALL_AUTHORS, BOOK_ADDED, AUTHOR_ADDED } from './queries'\n\nconst App = () => {\n\tconst [ token, setToken] = useState(null)\n\tconst [ page, setPage ] = useState('authors')\n\n\tconst client = useApolloClient()\n\t\n\tuseEffect(() => {\n\t\tconst existingToken = localStorage.getItem('library-user-token')\n\t\tif(existingToken) setToken(existingToken)\n\t}, [])\n\n\tuseSubscription(BOOK_ADDED, {\n\t\tonSubscriptionData: ({ subscriptionData }) => {\n\t\t\tconsole.log(subscriptionData)\n\t\t\tconst addedBook = subscriptionData.data.bookAdded\n\t\t\tupdateCacheWith(addedBook, 'allBooks', ALL_BOOKS)\n\t\t}\n\t})\n\n\tuseSubscription(AUTHOR_ADDED, {\n\t\tonSubscriptionData: ({ subscriptionData }) => {\n\t\t\tconsole.log(subscriptionData)\n\t\t\tconst addedAuthor = subscriptionData.data.authorAdded\n\t\t\tupdateCacheWith(addedAuthor, 'allAuthors', ALL_AUTHORS)\n\t\t}\n\t})\n\n\tconst updateCacheWith = (addedObject, storeProp, query) => {\n\t\tconst isIncluded = (set, object) => set.map(b => b.id).includes(object.id)\n\t\t\n\t\tconst dataInStore = client.readQuery({ query: query })\n\t\tconsole.log(dataInStore)\n\t\tif (!isIncluded(dataInStore[storeProp], addedObject)) {\n\t\t\tclient.writeQuery({\n\t\t\t\tquery: query,\n\t\t\t\tdata: { [storeProp]: dataInStore[storeProp].concat(addedObject)}\n\t\t\t})\n\t\t}\n\t} \n\n\tconst logout = (e) => {\n\t\te.preventDefault()\n\t\tsetToken(null)\n\t\tlocalStorage.clear()\n\t}\n\n  return (\n    <div>\n      <div>\n        <button onClick={() => setPage('authors')}>authors</button>\n        <button onClick={() => setPage('books')}>books</button>\n        \n\t\t\t\t{\n\t\t\t\t\t!token \n\t\t\t\t\t\t? <button onClick={() => setPage('login')}>login</button> \n\t\t\t\t\t\t: (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<button onClick={() => setPage('add')}>add book</button>\n\t\t\t\t\t\t\t\t<button onClick={() => setPage('recommend')}>recommend</button>\n\t\t\t\t\t\t\t\t<button onClick={logout}>logout</button>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t}\n      </div>\n\n      <Authors\n        show={page === 'authors'}\n      />\n\n      <Books\n        show={page === 'books'}\n      />\n\n      <NewBook\n        show={page === 'add'}\n      />\n\n\t\t\t<Recommendations\n\t\t\t\tshow={page === 'recommend'}\n\t\t\t/>\n\t\t\t\n\t\t\t<Login\n        show={page === 'login'}\n\t\t\t\tsetToken={setToken}\n\t\t\t\tsetPage={setPage}\n      />\n\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client'\n\nimport { setContext } from 'apollo-link-context'\n\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { WebSocketLink } from '@apollo/client/link/ws'\n\nconst authLink = setContext((_, { headers }) => {\n\tconst token = localStorage.getItem('library-user-token')\n\treturn {\n\t\theaders: {\n\t\t\t...headers,\n\t\t\tauthorization: token ? `bearer ${token}` : null\n\t\t}\n\t}\n})\n\nconst httpLink = new HttpLink({\n\turi: 'http://localhost:4000'\n})\n\nconst wsLink = new WebSocketLink({\n\turi: `ws://localhost:4000/graphql`,\n\toptions: {\n\t\treconnect: true\n\t}\n})\n\nconst splitLink = split(\n\t({ query }) => {\n\t\tconst definition = getMainDefinition(query)\n\t\treturn (\n\t\t\tdefinition.kind === 'OperationDefinition' &&\n\t\t\tdefinition.operation === 'subscription'\n\t\t)\n\t},\n\twsLink,\n\tauthLink.concat(httpLink),\n)\n\nconst client = new ApolloClient({\n\tcache: new InMemoryCache(),\n\tlink: splitLink\n})\n\nReactDOM.render(\n\t<ApolloProvider client={client}>\n\t\t<App />\n\t</ApolloProvider>\n, document.getElementById('root'))"],"sourceRoot":""}